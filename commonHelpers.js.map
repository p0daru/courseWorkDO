{"version":3,"file":"commonHelpers.js","sources":["../src/js/generator/taskGenerator.js","../src/js/algorithms/ant/result_ant.js","../src/js/algorithms/ant/ant.js","../src/js/tests/antTest.js","../src/js/algorithms/branchBound/reduction.js","../src/js/algorithms/branchBound/preventCycle.js","../src/js/algorithms/branchBound/branchesAndBounds.js","../src/js/algorithms/branchBound/calcShowResults.js","../src/js/algorithms/branchBound/bnbResults.js","../src/js/tests/branchBoundTest.js","../src/js/algorithms/greedy/greedy.js","../src/js/algorithms/pairwisePermut/pairwisePermut.js","../src/js/tests/parwiseTest.js","../src/js/tests/timeTest.js","../src/js/tests/accuracyTest.js"],"sourcesContent":["// Об`єкт функцій для генерації вхідних даних\nconst taskGenerator = {\n  /**\n   * Генерує матрицю передування для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @param {number} tau - Значення математичного сподівання.\n   * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n   * @returns {number[][]} - Матриця передування.\n   */\n  generateMatrix: function (numOfStudents, tau, deltaTau) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents, tau, deltaTau, true);\n\n    // Верхня та нижня границі для генерації випадкових значень\n    const minVal = tau - deltaTau;\n    const maxVal = tau + deltaTau;\n\n    // Створення та заповнення матриці значеннями\n    const matrix = Array.from({ length: numOfStudents }, () =>\n      Array.from({ length: numOfStudents }, () => Infinity)\n    );\n\n    for (let i = 0; i < numOfStudents; i += 1) {\n      for (let j = 0; j < numOfStudents; j += 1) {\n        // Перевірка, чи парність індексів різна\n        if (i % 2 !== j % 2) {\n          matrix[i][j] =\n            Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n        }\n      }\n    }\n\n    return matrix;\n  },\n\n  /**\n   * Генерує тривалість занять для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @returns {number[]} - Массив з тривалостями занять.\n   */\n  generateLessonDuration: function (numOfStudents) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents);\n\n    // Генерація тривалостей занять у діапазоні від 45 до 120 хвилин\n    const times = Array.from(\n      { length: numOfStudents },\n      () => Math.floor(Math.random() * (120 - 45 + 1)) + 45\n    );\n\n    return times;\n  },\n\n  // Отримати дефолтні вхідні дані\n  getDefaultInputValues: function () {\n    // матриця переналаштувань\n    let matrix = [\n      [Infinity, 5, Infinity, 10, Infinity, 15, Infinity, 5],\n      [30, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n      [Infinity, 20, Infinity, 25, Infinity, 5, Infinity, 25],\n      [35, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n      [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n      [30, Infinity, 25, Infinity, 10, Infinity, 10, Infinity],\n      [Infinity, 20, Infinity, 25, Infinity, 10, Infinity, 5],\n      [25, Infinity, 15, Infinity, 5, Infinity, 25, Infinity],\n    ];\n\n    // тривалість занять\n    let trainingDuration = [40, 120, 90, 90, 60, 50, 60, 40];\n\n    return { matrix, trainingDuration };\n  },\n};\n\n/**\n * Перевірка вхідних даних.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} [tau] - Значення математичного сподівання.\n * @param {number} [deltaTau] - Значення напівінтервалу ∆τ.\n * @param {boolean} [checkTauDeltaTau=false] - Флаг для перевірки tau та deltaTau.\n * @throws {Error} - Якщо неправильні вхідні дані.\n */\nexport function validateInputs(\n  numOfStudents,\n  tau,\n  deltaTau,\n  checkTauDeltaTau = false\n) {\n  if (\n    !Number.isInteger(numOfStudents) ||\n    numOfStudents <= 0 ||\n    numOfStudents % 2 !== 0 // Кількість студентів повинна бути парною\n  ) {\n    throw new Error(\n      'Неправильні вхідні дані! Очікується ціле додатнє парне число для numOfStudents.'\n    );\n  }\n\n  if (checkTauDeltaTau) {\n    if (tau < 0 || deltaTau < 0) {\n      throw new Error(\n        'Неправильні вхідні дані! Очікуються не від’ємні значення для tau і deltaTau.'\n      );\n    }\n  }\n}\n\n// Експорт функцій\nexport const generateMatrix = taskGenerator.generateMatrix;\nexport const generateLessonDuration = taskGenerator.generateLessonDuration;\nexport const getDefaultInputValues = taskGenerator.getDefaultInputValues;\n\n// Приклад використання\n// try {\n//   const matrix = taskGenerator.generateMatrix(4, 50, 10);\n//   console.log('Матриця передування:', matrix);\n\n//   const lessonDurations = taskGenerator.generateLessonDuration(4);\n//   console.log('Тривалості занять:', lessonDurations);\n// } catch (error) {\n//   console.error(error.message);\n// }\n\n//===== Test case 2 ====//\n// export function generateMatrix(numOfStudents, tau, deltaTau) {\n//   let matrix = []; // матриця передування\n\n//   for (let i = 0; i < numOfStudents; i += 1) {\n//     matrix[i] = [];\n\n//     for (let j = 0; j < numOfStudents; j += 1) {\n//       // якщо обидва індекси парні або непарні\n//       if (i % 2 === j % 2) {\n//         matrix[i][j] = Infinity;\n//         continue; // наступна ітерація\n//       }\n\n//       let minVal = tau - deltaTau; // нижнє значення\n//       let maxVal = tau + deltaTau; // верхнє значення\n\n//       matrix[i][j] = Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n//     }\n//   }\n\n//   return matrix;\n// }\n\n// let matrix = [\n//   [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n// ];\n","export function Schedule_(gender, result) {\n    let schedule = ''; // Початкове значення розкладу\n\n    // Проходимо по елементах масиву, починаючи з першого елемента\n\n    if ((gender === 'g' && result[0] % 2 === 0) || (gender === 'b' && result[0] % 2 === 1)) {\n        for (let i = 0; i < result.length; i++) {\n            const isLastNode = i === result.length - 1;\n            const value = result[i];\n            const isEven = i % 2 === 0;\n            if (isLastNode) {\n                schedule += isEven ? `g${value+1}` : `b${value+1}`;\n            } else {\n                schedule += isEven ? `g${value+1} -> ` : `b${value+1} -> `;\n            }\n        }\n    } else if ((gender === 'g' && result[0] % 2 === 1) || (gender === 'b' && result[0] % 2 === 0)) {\n        for (let i = 0; i < result.length; i++) {\n            const isLastNode = i === result.length - 1;\n            const value = result[i];\n            const isEven = i % 2 === 0;\n            if (isLastNode) {\n                schedule += isEven ? `b${value+1}` : `g${value+1}`;\n            } else {\n                schedule += isEven ? `b${value+1} -> ` : `g${value+1} -> `;\n            }\n        }\n    }\n\n\n    return schedule; // Повертаємо розклад\n}","import * as Generator from '../../generator/taskGenerator.js';\nimport * as results from '../ant/result_ant.js';\n\n    // Measure algorithm execution time\nexport function ant(\n  n,\n  t_matrix,\n  less_matrix = Generator.generateLessonDuration(n),\n  alpha = 1\n) {\n  // Measure algorithm execution time\n  const startTime = performance.now();\n\n  // Algorithm parameters\n  let beta = 1;\n  let tay_0 = 0.7;\n  let p = 0.1;\n\n  let tay_matrix = [];\n  let lMax = 10;\n  let result = [];\n  let result_func;\n  let schedule = '';\n\n  // Choose who will be first in the matrix, boy or girl\n  let gender = 'g';\n\n  let t_use = t_matrix.slice().map(row => row.slice());\n\n  // Reduce matrix preparation\n  function minFromRows(matrix) {\n    return matrix.map(row => Math.min(...row));\n  }\n\n  let minsByRows = minFromRows(t_use);\n\n  function subEveryRow(matrix, minBorder) {\n    const mins = minFromRows(matrix);\n    minBorder += mins.reduce((acc, curr) => acc + curr, 0);\n\n    const newMatrix = matrix.map((row, i) =>\n      row.map((value, j) => value - mins[i])\n    );\n\n    return { matrix: newMatrix, minBorder };\n  }\n\n  let { matrix: newMatrixRows, minBorder: newMinBorderRows } = subEveryRow(\n    t_use,\n    0\n  );\n\n  function minFromColumns(matrix) {\n    const mins = [];\n    const columns = Object.keys(matrix[0]);\n\n    columns.forEach(column => {\n      const columnValues = matrix.map(row => row[column]);\n      mins[column] = Math.min(...columnValues);\n    });\n\n    return mins;\n  }\n\n  let minsByCols = minFromColumns(t_use);\n\n  function subEveryColumn(matrix, minBorder) {\n    const mins = minFromColumns(matrix);\n    minBorder += Object.values(mins).reduce((acc, curr) => acc + curr, 0);\n\n    const newMatrix = matrix.map((row, i) =>\n      row.map((value, j) => value - mins[j])\n    );\n\n    return { matrix: newMatrix, minBorder };\n  }\n\n  let { matrix: newMatrixCols, minBorder: newMinBorderCols } = subEveryColumn(\n    t_use,\n    0\n  );\n\n  let min_res = newMinBorderCols + newMinBorderRows;\n\n  // Fill pheromone matrix\n  for (let i = 0; i < n; ++i) {\n    tay_matrix[i] = [];\n    for (let j = 0; j < n; ++j) {\n      if (t_matrix[i][j] != Infinity) {\n        tay_matrix[i][j] = tay_0;\n      } else {\n        tay_matrix[i][j] = Infinity;\n      }\n    }\n  }\n\n  // Main part of the program\n  for (let k = 1; k <= lMax; k++) {\n    let student = Math.floor(Math.random() * n); // Randomly choose the first student in each iteration\n    let iteration_matrix = t_matrix.slice().map(row => row.slice());\n    let result_it = []; // variable with results of each iteration\n    let result_it_func = 0;\n    let visited_array = Array.from({ length: n }, () => Array(n).fill(0));\n    result_it.push(student);\n\n    while (result_it.length < n) {\n      for (let x = 0; x < n; x++) iteration_matrix[x][student] = Infinity;\n\n      // Calculate denominator from formula 1\n      let formula_denominator = 0;\n      let res_set = new Map();\n      for (let i = 0; i < n; i++) {\n        if (iteration_matrix[student][i] != Infinity) {\n          formula_denominator +=\n            parseFloat(tay_matrix[student][i] ** alpha) *\n            (1 / t_matrix[student][i]) ** beta;\n        }\n      }\n      for (let i = 0; i < n; i++) {\n        let it = 0;\n        if (iteration_matrix[student][i] != Infinity) {\n          it = parseFloat(\n            (tay_matrix[student][i] ** alpha *\n              (1 / t_matrix[student][i]) ** beta) /\n              formula_denominator\n          ).toFixed(4);\n          if (res_set.size === 0) res_set.set(i, parseFloat(it));\n          else {\n            let lastValue = Array.from(res_set.values()).pop();\n            it = parseFloat(parseFloat(it) + parseFloat(lastValue)).toFixed(4);\n            res_set.set(i, parseFloat(it));\n          }\n        }\n      }\n\n      let randomNumber = parseFloat(Math.random()).toFixed(4); // Generate a random number from 0 to 1\n\n      for (let [key, value] of res_set.entries()) {\n        if (parseFloat(randomNumber) <= parseFloat(value)) {\n          student = key;\n          result_it.push(student);\n          break;\n        }\n      }\n    }\n\n    // Calculate TF:\n    for (let i = 0; i < result_it.length - 1; i++) {\n      const currentStudent = result_it[i];\n      const nextStudent = result_it[i + 1];\n      result_it_func +=\n        parseFloat(t_matrix[currentStudent][nextStudent]) + less_matrix[i];\n      visited_array[currentStudent][nextStudent] = 1;\n    }\n\n    let delta_tay = min_res / result_it_func;\n    // Update pheromone matrix\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        if (t_matrix[i][j] != Infinity) {\n          if (visited_array[i][j] === 1)\n            tay_matrix[i][j] = parseFloat(\n              (1 - p) * tay_matrix[i][j] + delta_tay\n            ).toFixed(4);\n          else\n            tay_matrix[i][j] = parseFloat((1 - p) * tay_matrix[i][j]).toFixed(\n              4\n            );\n        }\n      }\n    }\n\n    if (k === 1) {\n      result = result_it;\n      result_func = result_it_func;\n    } else if (result_func > result_it_func) {\n      result = result_it;\n      result_func = result_it_func;\n    }\n  }\n\n  const endTime = performance.now();\n  const executionTime = endTime - startTime;\n  // console.log('Schedule: ');\n  schedule = results.Schedule_(gender, result);\n  // console.log(schedule);\n  // console.log('TF: ', result_func);\n  // console.log('ExecutionTime: ', executionTime);\n\n  return { schedule, result, result_func, executionTime };\n}\n","import * as results from '../algorithms/ant/ant.js';\nimport * as Generator from '../generator/taskGenerator.js';\n\n// export function showAntTestResult() {\n\n// }\n\n// showAntTestResult();\n\n// Вхідні дані\nconst n = 8;\nconst tau = 100;\nconst deltaTau = 50;\nconst alphaArray = [1, 2, 3, 4, 5];\n\nlet result = test_ant(n, tau, deltaTau, alphaArray);\ndrawChart(alphaArray, result, 'antTest');\n\nfunction test_ant(n, tau, deltaTau, alphaArray) {\n  let result = [];\n  let N = 10;\n\n  for (let i = 0; i < alphaArray.length; i += 1) {\n    let total_result = 0;\n    for (let j = 0; j < N; j++) {\n      let t_matrix = Generator.generateMatrix(n, tau, deltaTau);\n      let less_matrix = Generator.generateLessonDuration(n);\n      console.table(t_matrix);\n      let res = results.ant(n, t_matrix, less_matrix, alphaArray[i]);\n      total_result += res.result_func;\n    }\n    let averageResult = total_result / N;\n    result.push(averageResult);\n    console.log(result);\n  }\n\n  return result;\n}\n\n// Вивести результати у вигляді графіка\nfunction drawChart(alpha, result, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n  new Chart(ctx, {\n    type: 'bar', // стовпчаста діаграма\n    data: {\n      labels: alphaArray,\n      datasets: [\n        {\n          label: 'ЦФ vs a',\n          data: result,\n          backgroundColor: 'rgb(255, 182, 193, 0.5)',\n          borderColor: 'rgba(255, 105, 180, 1)',\n          borderWidth: 0,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Графік залежності ЦФ від a',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Цільова функція: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Значення напівінтервалу a',\n          },\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Цільова Функція',\n          },\n        },\n      },\n    },\n  });\n}\n","// Pohorila Dariia\n\n// Функція для редукції матриці (мінімізація по рядках і стовпцях)\nexport function reduceMatrix(matrix, index) {\n  let sumMinRows = 0; // Сума мінімальних значень по рядках\n  let sumMinColumns = 0; // Сума мінімальних значень по стовпцях\n\n  //MINROW\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array); // Знаходження мінімального значення в рядку\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0; // Якщо значення не є числом або не є кінцевим, встановити 0\n    }\n    sumMinRows += min; // Додати мінімальне значення до суми\n    let minimizedRow = array.map(number => {\n      return (number -= min); // Відняти мінімальне значення з кожного елемента рядка\n    });\n    matrix[index] = minimizedRow; // Оновити рядок в матриці\n  });\n\n  //TRANSPOSED\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  //MINCOL\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array);\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0;\n    }\n    sumMinColumns += min;\n    let minimizedColumn = array.map(number => {\n      return (number -= min);\n    });\n    matrix[index] = minimizedColumn;\n  });\n\n  //DISTRAMPOSE\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  let total = sumMinRows + sumMinColumns; // Загальна вартість мінімізації\n\n  let node = {\n    index: index,\n    matrix: matrix,\n    cost: total,\n  };\n\n  return node;\n}\n","// Pohorila Dariia\n\n// Заборона негамільтонових шляхів\nexport function setRowColumnInfinity(matrix, from, to) {\n  // Функція для встановлення нескінченності у вказаних рядках та стовпцях\n  const thisMatrix = matrix.map(row => row.slice());\n\n  for (let i = 0; i < matrix.length; i += 1) {\n    thisMatrix[from][i] = Infinity; // Встановлення нескінченності в рядку\n    thisMatrix[i][to] = Infinity; // Встановлення нескінченності в стовпці\n    thisMatrix[to][from] = Infinity; // Встановлення нескінченності у зворотному напрямку\n    thisMatrix[to][0] = Infinity; // Встановлення нескінченності в першому елементі стовпця\n  }\n\n  return thisMatrix;\n}\n","// Pohorila Dariia\nimport * as matrixReduction from './reduction.js';\nimport * as preventCycle from './preventCycle.js';\n// import * as setRowColumnInfinityJs from './setRowColumnInfinity.js';\n\n// МЕТОД ГРАНИЦЬ І МЕЖ\nexport function branchAndBound(matrixData) {\n  // Встановлення нескінченності на діагоналі матриці\n  for (let i = 0; i < matrixData.length; i += 1) {\n    for (let j = 0; j < matrixData.length; j += 1) {\n      if (i == j) {\n        matrixData[i][j] = Infinity;\n      }\n    }\n  }\n\n  const minCostArray = []; // Масив для збереження мінімальної вартості\n  const objRoot = matrixReduction.reduceMatrix(matrixData, 0); // Початкова редукція матриці\n  minCostArray.push({\n    Node: objRoot.index + 1,\n    cost: objRoot.cost,\n  });\n\n  let row = objRoot.index; // Початковий рядок\n  let prevMatrix = objRoot.matrix.map(row => row.slice());\n  let prevCost = objRoot.cost; // Початкова вартість\n\n  // Прохід по всіх рядках матриці\n  for (let index = 0; index < matrixData.length - 1; index++) {\n    let objArrayTemp = []; // Тимчасовий масив для збереження вузлів\n    for (let column = 1; column < matrixData.length; column++) {\n      const infRowColumn = preventCycle.setRowColumnInfinity(\n        prevMatrix,\n        row,\n        column\n      ); // Встановлення нескінченності у рядках та стовпцях\n      const objNode = matrixReduction.reduceMatrix(infRowColumn, column); // Редукція нової матриці\n\n      objNode.cost = objNode.cost + prevCost + prevMatrix[row][column]; // Оновлення вартості вузла\n      objArrayTemp.push(objNode); // Додавання вузла до тимчасового масиву\n      //   console.log(\"Node: %d - Cost: %d\", objNode.index, objNode.cost);\n    }\n\n    // Знаходження вузла з мінімальною вартістю\n    let objMinCost = objArrayTemp.reduce(function (prev, curr) {\n      return prev.cost < curr.cost ? prev : curr;\n    });\n    // console.log(' Node: %d - Cost: %d ', objMinCost.index + 1, objMinCost.cost);\n\n    minCostArray.push({\n      Node: objMinCost.index + 1,\n      cost: objMinCost.cost,\n    });\n\n    row = objMinCost.index;\n    prevMatrix = objMinCost.matrix.map(row => row.slice());\n    prevCost = objMinCost.cost;\n  }\n\n  // Витяг останнього значення cost з масиву minCostArray\n  const lastCost = minCostArray[minCostArray.length - 1].cost;\n\n  return { minCostArray, lastCost };\n}\n\n////// OUTPUT\n////// DATA\n// ТРИВАЛОСТІ УРОКІВ\n// const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n// const trainingDuration = [40, 120, 90, 90, 60, 50, 60, 40];\n\n// МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ\n// let matrix = Generator.generateMatrix(numOfStudents, tau, deltaTau);\n// let matrix = [\n//   [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n// ];\n\n// console.log('\\nМАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n// console.table(matrix);\n\n// console.log('\\nВУЗЛИ');\n// const { minCostArray, lastCost } = branchAndBound(matrix);\n// console.log(minCostArray);\n\n// console.log('\\nРОЗКЛАД:');\n// let schedule = results.printSchedule(minCostArray);\n// console.log(schedule);\n\n// console.log('\\nСума переналаштувань:', lastCost, 'хв');\n\n// const totalDuration = results.sumOfDurations(trainingDuration);\n// console.log(`Тривалість уроків:`, totalDuration, 'хв');\n\n// const totalWorkTime = results.calcTrainerWorkTime(totalDuration, lastCost);\n// console.log('ЧАС РОБОТИ ТРЕНЕРА:', totalWorkTime, 'хв\\n');\n","// Pohorila Dariia\n\n// Вивести розклад\nexport function printSchedule(minCostArray) {\n  let schedule = ''; // Початкове значення розкладу\n\n  // Проходимо по елементах масиву minCostArray, починаючи з другого елемента\n  for (let i = 0; i < minCostArray.length; i++) {\n    const isLastNode = i === minCostArray.length - 1;\n    const node = minCostArray[i].Node;\n    const isEven = i % 2 === 0;\n\n    if (isLastNode) {\n      schedule += isEven ? `g${node}` : `b${node}`;\n    } else {\n      schedule += isEven ? `g${node} -> ` : `b${node} -> `;\n    }\n  }\n\n  return schedule; // Повертаємо розклад\n}\n\n// Обчислити суму тривалостей занять\nexport function sumOfDurations(durations) {\n  return durations.reduce((acc, duration) => acc + duration, 0);\n}\n\n// Обчислити сумарний робочий час тренера\nexport function calcTrainerWorkTime(totalDuration, lastCost) {\n  return totalDuration + lastCost;\n}\n","import * as Generator from '../../generator/taskGenerator.js';\nimport * as bnb from './branchesAndBounds.js';\nimport * as calcShowResults from './calcShowResults.js';\n\n//////// РОЗВ`ЯЗОК ЗАДАЧІ МГтМ ТА ВИВЕДЕННЯ РЕЗУЛЬТАТІВ РОБОТИ АЛГОРИТМУ\nexport function calcResultsBnB(matrix, trainingDuration) {\n    // Початок вимірювання часу\n    const startTime = performance.now();\n\n    // Виконання алгоритму гілок та границь\n    let { minCostArray, lastCost } = bnb.branchAndBound(matrix);\n\n    // Обчислення розкладу та часу роботи тренера\n    let schedule = calcShowResults.printSchedule(minCostArray);\n    let totalDuration = calcShowResults.sumOfDurations(trainingDuration);\n    let totalWorkTime = calcShowResults.calcTrainerWorkTime(\n        totalDuration,\n        lastCost\n    );\n\n    // Завершення вимірювання часу та виведення результату\n    const endTime = performance.now();\n    const executionTimeBnB = endTime - startTime;\n\n    return {\n        totalWorkTimeBnB: totalWorkTime,\n        scheduleBnB: schedule,\n        executionTimeBnB,\n    };\n}\n\n/**\n * Обчислює результати для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n * @returns {Object} - Об'єкт з результатами.\n */\nexport function getResults(matrix, trainingDuration) {\n    // Виконання алгоритму гілок та границь\n    let { minCostArray, lastCost } = bnb.branchAndBound(matrix);\n\n    // Обчислення розкладу та часу роботи тренера\n    let schedule = calcShowResults.printSchedule(minCostArray);\n    let totalDuration = calcShowResults.sumOfDurations(trainingDuration);\n    let totalWorkTime = calcShowResults.calcTrainerWorkTime(\n        totalDuration,\n        lastCost\n    );\n\n    // Повернення об'єкта з усіма результатами\n    return {\n        trainingDuration,\n        matrix,\n        minCostArray,\n        lastCost,\n        schedule,\n        totalDuration,\n        totalWorkTime,\n    };\n}\n\n/**\n * Виводить результати на консоль для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n */\nexport function outputResultsBnB(matrix, trainingDuration) {\n    // Отримання результатів\n    const results = getResults(matrix, trainingDuration);\n\n    // Виведення результатів на консоль\n    console.log('ГЕНЕРАЦІЯ ІНДИВІДУАЛЬНОЇ ЗАДАЧІ...\\n');\n    console.log('1.ТРИВАЛІСТЬ ЗАЙНЯТЬ');\n    console.table(results.trainingDuration);\n\n    console.log('2.МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n    console.table(results.matrix);\n\n    console.log('\\nПОШУК РОЗВ`ЯЗКУ МГтМ...');\n    console.log('\\nВузли');\n    console.log(results.minCostArray);\n\n    console.log('\\nРозклад:');\n    console.log(results.schedule);\n\n    console.log('\\nСума переналаштувань:', results.lastCost, 'хв');\n    console.log('Тривалість уроків:', results.totalDuration, 'хв');\n    console.log('Час роботи тренера:', results.totalWorkTime, 'хв\\n');\n\n    return results.totalWorkTime;\n}\n\n// Test Case\n// try {\n//     const numOfStudents = 8;\n//     const tau = 50;\n//     const deltaTau = 10;\n\n//     // outputResultsBnB(numOfStudents, tau, deltaTau);\n//     // let results = getResults(numOfStudents, tau, deltaTau);\n//     // console.log(results);\n// } catch (error) {\n//     console.error('Помилка:', error.message);\n// }","import * as results from '../algorithms/branchBound/bnbResults.js';\nimport * as Generator from '../generator/taskGenerator.js';\n\n// export function showBnbTestResult() {}\n\n// showBnbTestResult();\n\n// Input data\nconst numOfStudents = 8; // problem size\nconst tau = 100; // mean value\nconst deltaTauValues = [10, 50]; // semi-interval values\n\n// Example function call\nconst targetFunctions = testBnb(numOfStudents, tau, deltaTauValues);\ndrawChart(deltaTauValues, targetFunctions, 'bnbTest'); // draw histograms\n// console.log(targetFunctions);\n\n// Calculate the average target functions for different deltaTau values\nfunction testBnb(numOfStudents, tau, deltaTauValues) {\n  let averageTargetFuncs = [];\n  const numOfRuns = 20;\n\n  for (let i = 0; i < deltaTauValues.length; i += 1) {\n    // Store target functions for current deltaTau\n    let targetFunctions = 0;\n\n    for (let j = 0; j < numOfRuns; j += 1) {\n      // Generate lesson durations and transition matrix\n      const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n      const matrix = Generator.generateMatrix(\n        numOfStudents,\n        tau,\n        deltaTauValues[i]\n      );\n\n      // Calculate target function using Branch and Bound results\n      let targetFunc = results.calcResultsBnB(\n        matrix,\n        trainingDuration\n      ).totalWorkTimeBnB;\n\n      targetFunctions += targetFunc;\n    }\n    // Calculate and store the average target function for the current deltaTau\n    const averageTF = targetFunctions / numOfRuns;\n    averageTargetFuncs.push(averageTF);\n  }\n\n  return averageTargetFuncs;\n}\n\n// Draw histograms\nfunction drawChart(deltaTauValues, targetFunctions, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n  new Chart(ctx, {\n    type: 'bar', // histograms\n    data: {\n      labels: deltaTauValues,\n      datasets: [\n        {\n          label: 'ЦФ vs ∆τ',\n          data: targetFunctions,\n          backgroundColor: 'rgb(96, 130, 182)',\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 0,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Графік залежності ЦФ від ∆τ',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Цільова Функція: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Значення напівінтервалу ∆τ',\n          },\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Цільова Функція',\n          },\n        },\n      },\n    },\n  });\n}\n\n// Calculate the average value of an array\nfunction calculateAverage(arr) {\n  if (arr.length === 0) {\n    return 0; // Return 0 if the array is empty\n  }\n\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum / arr.length;\n}\n\n// Обчислення ЦФ для різних ∆τ. Один прогон\n// function testBnb(numOfStudents, tau, deltaTauValues) {\n//   let targetFunctions = [];\n//   const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n\n//   for (let i = 0; i < deltaTauValues.length; i += 1) {\n//     const matrix = Generator.generateMatrix(\n//       numOfStudents,\n//       tau,\n//       deltaTauValues[i]\n//     );\n\n//     let res = results.calcResultsBnB(matrix, trainingDuration);\n//     targetFunctions.push(res.totalWorkTimeBnB);\n//   }\n\n//   return targetFunctions;\n// }\n","import { generateMatrix } from '../../generator/taskGenerator.js';\r\n\r\nfunction findNearestNeighbor(matrix, current, visited) {\r\n  let nearest = -1;\r\n  let minDistance = Infinity;\r\n\r\n  for (let i = 0; i < matrix.length; i++) {\r\n    if (!visited.has(i) && matrix[current][i] < minDistance) {\r\n      minDistance = matrix[current][i];\r\n      nearest = i;\r\n    }\r\n  }\r\n\r\n  return nearest;\r\n}\r\n\r\nexport function greedySchedule(matrix) {\r\n  let numOfStudents = matrix.length;\r\n  let visited = new Set();\r\n  let schedule = [];\r\n\r\n  let current = 0; // Start with the first student as a predefined student (e.g., g1)\r\n  schedule.push(current);\r\n  visited.add(current);\r\n\r\n  while (schedule.length < numOfStudents) {\r\n    let next = findNearestNeighbor(matrix, current, visited);\r\n    if (next === -1) break;\r\n\r\n    schedule.push(next);\r\n    visited.add(next);\r\n    current = next;\r\n  }\r\n\r\n  return schedule;\r\n}\r\n\r\n// Additional function for the timeTest\r\nexport function getGreedyResults(matrix) {\r\n  const startTime = performance.now();\r\n\r\n  let schedule = greedySchedule(matrix);\r\n\r\n  const endTime = performance.now();\r\n  const executionTimeGreedy = endTime - startTime;\r\n\r\n  const totalPreparationTime = calculateTotalPreparationTime(matrix, schedule);\r\n  let scheduleFormat = schedule.map(getStudentLabel).join(' -> ');\r\n\r\n  return {\r\n    schedule,\r\n    scheduleFormat,\r\n    totalPreparationTime,\r\n    executionTimeGreedy,\r\n  };\r\n}\r\n\r\nexport function calculateTotalPreparationTime(matrix, schedule) {\r\n  let total = 0;\r\n  for (let i = 0; i < schedule.length - 1; i++) {\r\n    total += matrix[schedule[i]][schedule[i + 1]];\r\n  }\r\n  return total;\r\n}\r\n\r\nfunction getStudentLabel(index) {\r\n  return index % 2 === 0\r\n    ? `g${Math.floor(index / 2) + 1}`\r\n    : `b${Math.floor(index / 2) + 1}`;\r\n}\r\n\r\n// Function to format the schedule\r\nexport function formatSchedule(result) {\r\n  let schedule = '';\r\n  for (let i = 0; i < result.length; i++) {\r\n    const isLastNode = i === result.length - 1;\r\n    const value = result[i];\r\n    const isEven = i % 2 === 0;\r\n    if (isLastNode) {\r\n      schedule += isEven ? `g${value + 1}` : `b${value + 1}`;\r\n    } else {\r\n      schedule += isEven ? `g${value + 1} -> ` : `b${value + 1} -> `;\r\n    }\r\n  }\r\n  return schedule;\r\n}\r\n","import { generateMatrix } from '../../generator/taskGenerator.js';\nimport {\n  greedySchedule,\n  calculateTotalPreparationTime,\n} from '../greedy/greedy.js';\n\nfunction swapPairs(schedule, numOfStudents) {\n  let newSchedule = schedule.slice();\n  let group = Math.random() < 0.5 ? 0 : 1;\n\n  let candidates = [];\n  for (let i = 0; i < numOfStudents; i++) {\n    if (i % 2 === group) {\n      candidates.push(i);\n    }\n  }\n\n  let index1 = candidates[Math.floor(Math.random() * candidates.length)];\n  let index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  while (index1 === index2) {\n    index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  }\n\n  let temp = newSchedule[index1];\n  newSchedule[index1] = newSchedule[index2];\n  newSchedule[index2] = temp;\n\n  return newSchedule;\n}\n\nfunction optimizeSchedule(matrix, initialSchedule, maxIterations) {\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  for (let i = 0; i < maxIterations; i++) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n  }\n\n  return { bestSchedule, bestTime };\n}\n\n// Additional func for the timeTest\nexport function getResultsPP(matrix, initialSchedule, maxIterations = 1000) {\n  const startTime = performance.now();\n\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  for (let i = 0; i < maxIterations; i++) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n  }\n\n  const endTime = performance.now();\n  const executionTimePairwise = endTime - startTime;\n\n  // console.log(`Pairwise Permutation Schedule: ${bestSchedule}`);\n  // console.log(`Pairwise Permutation TF: ${bestTime}`);\n\n  bestSchedule = formatSchedule(bestSchedule);\n\n  return { bestSchedule, bestTime, executionTimePairwise };\n}\n\n// Function to format the schedule\nexport function formatSchedule(result) {\n  let schedule = '';\n  if (result[0] % 2 === 0) {\n    for (let i = 0; i < result.length; i++) {\n      const isLastNode = i === result.length - 1;\n      const value = result[i];\n      const isEven = i % 2 === 0;\n      if (isLastNode) {\n        schedule += isEven ? `g${value + 1}` : `b${value + 1}`;\n      } else {\n        schedule += isEven ? `g${value + 1} -> ` : `b${value + 1} -> `;\n      }\n    }\n  } else {\n    for (let i = 0; i < result.length; i++) {\n      const isLastNode = i === result.length - 1;\n      const value = result[i];\n      const isEven = i % 2 === 0;\n      if (isLastNode) {\n        schedule += isEven ? `b${value + 1}` : `g${value + 1}`;\n      } else {\n        schedule += isEven ? `b${value + 1} -> ` : `g${value + 1} -> `;\n      }\n    }\n  }\n  return schedule;\n}\n","import { generateMatrix } from '../generator/taskGenerator.js';\nimport {\n  getGreedyResults,\n  calculateTotalPreparationTime,\n} from '../algorithms/greedy/greedy.js';\nimport { getResultsPP } from '../algorithms/pairwisePermut/pairwisePermut.js';\nimport { ant } from '../algorithms/ant/ant.js';\n\n// Show Results\n// export function showPairwiseTestResult() {\n\n// }\n\n// showPairwiseTestResult();\n\n// Parameters\nconst numOfStudents = [4, 6, 8, 10, 12, 14, 16, 18, 20]; // Problem size\nconst tau = 100; // Mean value\nconst deltaTau = 10; // Semi-interval value\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Run the test and build the charts\n  const data = deviationTest(numOfStudents, tau, deltaTau);\n  drawDeviationChart(data, 'deviationTest'); // Display charts\n\n  // Average deviations for console output\n  let { averageDeviationsFromAnt, averageDeviationsFromGreedy } = data;\n\n  console.log(\n    'Average deviations of TF for pairwise permutation method relative to TF obtained by ant algorithm – ',\n    averageDeviationsFromAnt\n  );\n  console.log(\n    'Average deviations of TF for pairwise permutation method relative to TF obtained by greedy algorithm – ',\n    averageDeviationsFromGreedy\n  );\n});\n\n// Test function for calculating deviations\nfunction deviationTest(numOfStudents, tau, deltaTau) {\n  let averageDeviationsFromAnt = [];\n  let averageDeviationsFromGreedy = [];\n\n  for (let n of numOfStudents) {\n    let deviationsFromAnt = [];\n    let deviationsFromGreedy = [];\n\n    for (let i = 0; i < 20; i++) {\n      // Generate individual problem P\n      let P = generateMatrix(n, tau, deltaTau);\n\n      // Solve problem P using pairwise permutations, where the initial problem P is defined by the ant algorithm\n      let { result: antSchedule, result_func: antTF } = ant(n, P);\n\n      // Solve problem P using pairwise permutations, where the initial problem P is defined by the greedy algorithm\n      let { schedule: greedySchedule, executionTimeGreedy } =\n        getGreedyResults(P);\n      let greedyTF = calculateTotalPreparationTime(P, greedySchedule);\n\n      // Output results of the greedy algorithm\n      console.log(`Problem size: ${n}, Run: ${i + 1}`);\n      console.log(\n        `  Initial solution from greedy algorithm - Target function (TF): ${greedyTF}`\n      );\n      console.log(\n        `  Initial solution from ant algorithm - Target function (TF): ${antTF}`\n      );\n\n      // Solve problem P using pairwise permutations\n      let { bestTime: ppTimeFromAnt } = getResultsPP(P, antSchedule);\n      let { bestTime: ppTimeFromGreedy } = getResultsPP(P, greedySchedule);\n\n      // Output results of pairwise permutation method\n      console.log(\n        `  Pairwise permutations with initial solution from ant algorithm - TF: ${ppTimeFromAnt}`\n      );\n      console.log(\n        `  Pairwise permutations with initial solution from greedy algorithm - TF: ${ppTimeFromGreedy}`\n      );\n\n      // Calculate TF deviations\n      let deviationFromAnt = calculateDeviation(ppTimeFromAnt, antTF);\n      let deviationFromGreedy = calculateDeviation(ppTimeFromGreedy, greedyTF);\n\n      console.log(\n        `  TF deviation for pairwise permutation method relative to TF obtained by ant algorithm: ${deviationFromAnt}`\n      );\n      console.log(\n        `  TF deviation for pairwise permutation method relative to TF obtained by greedy algorithm: ${deviationFromGreedy}`\n      );\n\n      deviationsFromAnt.push(deviationFromAnt);\n      deviationsFromGreedy.push(deviationFromGreedy);\n    }\n\n    // Determine the average TF deviation\n    averageDeviationsFromAnt.push(calculateAverage(deviationsFromAnt));\n    averageDeviationsFromGreedy.push(calculateAverage(deviationsFromGreedy));\n  }\n\n  return {\n    labels: numOfStudents, // Labels for the chart\n    averageDeviationsFromAnt,\n    averageDeviationsFromGreedy,\n  };\n}\n\n// Function for calculating TF deviation\nfunction calculateDeviation(value1, value2) {\n  return Math.abs(value1 - value2) / Math.min(value1, value2);\n}\n\n// Build charts\nfunction drawDeviationChart(data, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: data.labels,\n      datasets: [\n        {\n          label: 'Deviation from TF of ant algorithm',\n          data: data.averageDeviationsFromAnt,\n          backgroundColor: 'rgba(96, 130, 182, 0.7)',\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Deviation from TF of greedy algorithm',\n          data: data.averageDeviationsFromGreedy,\n          backgroundColor: 'rgba(182, 96, 130, 0.7)',\n          borderColor: 'rgba(180, 70, 130, 1)',\n          borderWidth: 1,\n          type: 'line', // Use a line chart for the pink dataset\n          fill: false, // Disable fill for the line chart\n          pointStyle: 'circle', // Use circles for data points\n          pointRadius: 5, // Increase the size of data points\n          yAxisID: 'y-axis-2', // Use a secondary y-axis\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Average TF deviation for pairwise permutation method relative to TF of ant and greedy algorithms',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Average deviation: ${context.raw}`;\n            },\n          },\n        },\n        datalabels: {\n          display: true,\n          align: 'top',\n          formatter: (value, context) => value.toFixed(2),\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: 'Number of students (n)',\n          },\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Average deviation',\n          },\n          ticks: {\n            min: 0,\n            max: 1,\n          },\n        },\n        'y-axis-2': {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Deviation from TF of greedy algorithm',\n          },\n          position: 'right',\n          grid: {\n            drawOnChartArea: false,\n          },\n          ticks: {\n            min: 0,\n            max: 1,\n          },\n        },\n      },\n    },\n  });\n}\n\n// Calculate the average value of an array\nfunction calculateAverage(arr) {\n  if (arr.length === 0) {\n    return 0; // Return 0 if the array is empty\n  }\n\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum / arr.length;\n}\n","import * as Generator from '../generator/taskGenerator.js';\nimport { getGreedyResults } from '../algorithms/greedy/greedy.js';\nimport { ant } from '../algorithms/ant/ant.js';\nimport { calcResultsBnB } from '../algorithms/branchBound/bnbResults.js';\nimport { getResultsPP } from '../algorithms/pairwisePermut/pairwisePermut.js';\n\n// export function showTTResult() {\n\n// }\n\n// showTTResult();\n\n// Input data\nconst numOfStudents = [4, 6, 8, 10, 12, 14, 16, 18, 20]; // problem size\nconst tau = 100; // mean value\nconst deltaTau = 10; // semi-interval value\n\n// Example function call\nconst data = timeTest(numOfStudents, tau, deltaTau);\ndrawTimeChart(data, 'timeTest'); // draw histograms\n\n// Testing\nfunction timeTest(numOfStudents, tau, deltaTau) {\n  // Execution times and average execution times of the algorithms\n  let averageTimesGreedy = [];\n  let averageTimesAnt = [];\n  let averageTimesBnB = [];\n  let averageTimesPP = [];\n\n  for (let i = 0; i < numOfStudents.length; i++) {\n    // 20 runs\n    let execTimesGreedy = [];\n    let execTimesAnt = [];\n    let execTimesBnB = [];\n    let execTimesPP = [];\n\n    for (let j = 0; j < 20; j++) {\n      // Generate lesson durations and transition matrix\n      const trainingDuration = Generator.generateLessonDuration(\n        numOfStudents[i],\n        tau,\n        deltaTau\n      );\n      const matrix = Generator.generateMatrix(numOfStudents[i], tau, deltaTau);\n\n      // Calculate algorithm executions\n      const step = 0.1;\n\n      // Greedy\n      const resGreedy = getGreedyResults(matrix);\n      const execTimeGreedy = resGreedy.executionTimeGreedy + step;\n\n      // Ant\n      const resAnt = ant(numOfStudents[i], matrix);\n      const execTimeAnt = resAnt.executionTime + step;\n\n      // BnB\n      const resBnB = calcResultsBnB(matrix, trainingDuration);\n      const execTimeBnB = resBnB.executionTimeBnB + step;\n\n      // Pairwise\n      const resPP = getResultsPP(matrix, resGreedy.schedule);\n      const execTimePP = resPP.executionTimePairwise + step;\n\n      // Add times to the corresponding algorithm array\n      execTimesGreedy.push(execTimeGreedy);\n      execTimesAnt.push(execTimeAnt);\n      execTimesBnB.push(execTimeBnB);\n      execTimesPP.push(execTimePP);\n    }\n\n    // Calculate average times and add to the corresponding algorithm array\n    averageTimesGreedy.push(calculateAverage(execTimesGreedy));\n    averageTimesAnt.push(calculateAverage(execTimesAnt));\n    averageTimesBnB.push(calculateAverage(execTimesBnB));\n    averageTimesPP.push(calculateAverage(execTimesPP));\n  }\n\n  return {\n    labels: numOfStudents, // horizontal axis labels\n    averageTimesGreedy,\n    averageTimesAnt,\n    averageTimesBnB,\n    averageTimesPP,\n  };\n}\n\n// Draw histograms\nfunction drawTimeChart(data, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: data.labels,\n      datasets: [\n        {\n          label: 'Greedy',\n          data: data.averageTimesGreedy,\n          backgroundColor: 'rgb(96, 130, 182)',\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Ant',\n          data: data.averageTimesAnt,\n          backgroundColor: 'rgb(182, 96, 130)',\n          borderColor: 'rgba(180, 70, 130, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'BnB',\n          data: data.averageTimesBnB,\n          backgroundColor: 'rgb(96, 182, 130)',\n          borderColor: 'rgba(70, 180, 130, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Pairwise',\n          data: data.averageTimesPP,\n          backgroundColor: 'rgb(130, 96, 182)',\n          borderColor: 'rgba(130, 70, 180, 1)',\n          borderWidth: 1,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Average Execution Time vs Number of Students',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Average Execution Time: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: 'Number of Students (n)',\n          },\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Average Execution Time (ms)',\n          },\n        },\n      },\n      layout: {\n        backgroundColor: 'rgba(211, 211, 211, 1)',\n      },\n    },\n  });\n}\n\n// Calculate the average value of an array\nfunction calculateAverage(arr) {\n  if (arr.length === 0) {\n    return 0; // Return 0 if the array is empty\n  }\n\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum / arr.length;\n}\n","import * as Generator from '../generator/taskGenerator.js';\nimport {\n  getGreedyResults,\n  calculateTotalPreparationTime,\n} from '../algorithms/greedy/greedy.js';\nimport { ant } from '../algorithms/ant/ant.js';\nimport { calcResultsBnB } from '../algorithms/branchBound/bnbResults.js';\nimport { getResultsPP } from '../algorithms/pairwisePermut/pairwisePermut.js';\n\n// Show Results\n// export function showAccuracyTestResult() {\n\n// }\n\n// showAccuracyTestResult();\n\n// Input data\nconst numOfStudents = [4, 6, 8, 10, 12, 14, 16, 18, 20]; // Problem size\nconst tau = 100; // Mean value\nconst deltaTau = 10; // Semi-interval value\n\n// Example function call\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Run the test and build the charts\n  const data = accuracyTest(numOfStudents, tau, deltaTau);\n  drawAccuracyChart(data, 'accuracyTest'); // Display charts\n\n  // Average deviations for console output\n  // let {\n  //   averageDeviationsGreedy,\n  //   averageDeviationsAnt,\n  //   averageDeviationsPP,\n  //   averageDeviationsBnB,\n  // } = data;\n\n  // console.log(\n  //   'Average deviations of TF for greedy algorithm relative to optimal TF – ',\n  //   averageDeviationsGreedy\n  // );\n  // console.log(\n  //   'Average deviations of TF for ant algorithm relative to optimal TF – ',\n  //   averageDeviationsAnt\n  // );\n  // console.log(\n  //   'Average deviations of TF for pairwise permutation algorithm relative to optimal TF – ',\n  //   averageDeviationsPP\n  // );\n  // console.log(\n  //   'Average deviations of TF for bnb algorithm relative to optimal TF – ',\n  //   averageDeviationsBnB\n  // );\n});\n\n// Accuracy testing\nfunction accuracyTest(numOfStudents, tau, deltaTau) {\n  let averageDeviationsGreedy = [];\n  let averageDeviationsAnt = [];\n  let averageDeviationsPP = [];\n  let averageDeviationsBnB = []; // added for BnB\n\n  for (let n of numOfStudents) {\n    let deviationsGreedy = [];\n    let deviationsAnt = [];\n    let deviationsPP = [];\n    let deviationsBnB = []; // added for BnB\n\n    for (let i = 0; i < 20; i++) {\n      // Generate individual problem P\n      let P = Generator.generateMatrix(n, tau, deltaTau);\n\n      // Solve problem P using the greedy algorithm\n      let { schedule: greedySchedule } = getGreedyResults(P);\n      let greedyTF = calculateTotalPreparationTime(P, greedySchedule);\n\n      // Solve problem P using the ant algorithm\n      let { result: antSchedule, result_func: antTF } = ant(n, P);\n\n      // Solve problem P using the BnB algorithm\n      let {\n        totalWorkTimeBnB: optimalTF,\n        scheduleBnB,\n        executionTimeBnB,\n      } = calcResultsBnB(P, Generator.generateLessonDuration(n));\n\n      // Log the BnB results to check if they are correct\n      console.log('BnB Results:', { optimalTF, scheduleBnB, executionTimeBnB });\n\n      // Ensure optimalTF is correctly returned\n      if (typeof optimalTF === 'undefined') {\n        console.error('optimalTF is undefined in calcResultsBnB', {\n          scheduleBnB,\n          executionTimeBnB,\n        });\n        continue;\n      }\n\n      // Solve problem P using the pairwise permutation algorithm\n      let { bestTime: ppTF } = getResultsPP(P, greedySchedule);\n\n      // Check if any TF value is NaN\n      if (isNaN(greedyTF) || isNaN(antTF) || isNaN(optimalTF) || isNaN(ppTF)) {\n        console.error('NaN encountered:', { greedyTF, antTF, optimalTF, ppTF });\n        continue;\n      }\n\n      // Calculate deviations\n      let deviationGreedy = calculateDeviation(greedyTF, optimalTF);\n      let deviationAnt = calculateDeviation(antTF, optimalTF);\n      let deviationPP = calculateDeviation(ppTF, optimalTF);\n      let deviationBnB = 0; // For BnB, deviation from itself is zero\n\n      // Store deviations\n      deviationsGreedy.push(deviationGreedy);\n      deviationsAnt.push(deviationAnt);\n      deviationsPP.push(deviationPP);\n      deviationsBnB.push(deviationBnB); // added for BnB\n    }\n\n    // Calculate average deviations\n    averageDeviationsGreedy.push(calculateAverage(deviationsGreedy));\n    averageDeviationsAnt.push(calculateAverage(deviationsAnt));\n    averageDeviationsPP.push(calculateAverage(deviationsPP));\n    averageDeviationsBnB.push(calculateAverage(deviationsBnB)); // added for BnB\n  }\n\n  return {\n    labels: numOfStudents, // Labels for the chart\n    averageDeviationsGreedy,\n    averageDeviationsAnt,\n    averageDeviationsPP,\n    averageDeviationsBnB, // added for BnB\n  };\n}\n\n// Function to calculate deviation\nfunction calculateDeviation(value, optimalValue) {\n  return Math.abs(value - optimalValue) / optimalValue;\n}\n\n// Draw charts\nfunction drawAccuracyChart(data, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: data.labels,\n      datasets: [\n        {\n          label: 'Greedy',\n          data: data.averageDeviationsGreedy,\n          backgroundColor: 'rgb(96, 130, 182)',\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Ant',\n          data: data.averageDeviationsAnt,\n          backgroundColor: 'rgb(182, 96, 130)',\n          borderColor: 'rgba(180, 70, 130, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Pairwise',\n          data: data.averageDeviationsPP,\n          backgroundColor: 'rgb(130, 96, 182)',\n          borderColor: 'rgba(130, 70, 180, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'BnB',\n          data: data.averageDeviationsBnB,\n          backgroundColor: 'rgb(96, 182, 130)',\n          borderColor: 'rgba(70, 180, 130, 1)',\n          borderWidth: 1,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Average TF Deviation vs Number of Students',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Average Deviation: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: 'Number of Students (n)',\n          },\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Average Deviation',\n          },\n        },\n      },\n      layout: {\n        backgroundColor: 'rgba(211, 211, 211, 1)',\n      },\n    },\n  });\n}\n\n// Calculate the average value of an array\nfunction calculateAverage(arr) {\n  if (arr.length === 0) {\n    return 0; // Return 0 if the array is empty\n  }\n\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum / arr.length;\n}\n"],"names":["taskGenerator","numOfStudents","tau","deltaTau","validateInputs","minVal","maxVal","matrix","i","j","checkTauDeltaTau","generateMatrix","generateLessonDuration","Schedule_","gender","result","schedule","isLastNode","value","isEven","ant","n","t_matrix","less_matrix","Generator.generateLessonDuration","alpha","startTime","beta","tay_0","p","tay_matrix","lMax","result_func","t_use","row","minFromRows","subEveryRow","minBorder","mins","acc","curr","newMatrixRows","newMinBorderRows","minFromColumns","column","columnValues","subEveryColumn","newMatrixCols","newMinBorderCols","min_res","k","student","iteration_matrix","result_it","result_it_func","visited_array","x","formula_denominator","res_set","it","lastValue","randomNumber","key","currentStudent","nextStudent","delta_tay","executionTime","results.Schedule_","alphaArray","test_ant","drawChart","N","total_result","Generator.generateMatrix","res","results.ant","averageResult","htmlElement","ctx","context","reduceMatrix","index","sumMinRows","sumMinColumns","array","min","minimizedRow","number","_","colIndex","minimizedColumn","total","setRowColumnInfinity","from","to","thisMatrix","branchAndBound","matrixData","minCostArray","objRoot","matrixReduction.reduceMatrix","prevMatrix","prevCost","objArrayTemp","infRowColumn","preventCycle.setRowColumnInfinity","objNode","objMinCost","prev","lastCost","printSchedule","node","sumOfDurations","durations","duration","calcTrainerWorkTime","totalDuration","calcResultsBnB","trainingDuration","bnb.branchAndBound","calcShowResults.printSchedule","calcShowResults.sumOfDurations","totalWorkTime","calcShowResults.calcTrainerWorkTime","executionTimeBnB","deltaTauValues","targetFunctions","testBnb","averageTargetFuncs","targetFunc","results.calcResultsBnB","averageTF","findNearestNeighbor","current","visited","nearest","minDistance","greedySchedule","next","getGreedyResults","executionTimeGreedy","totalPreparationTime","calculateTotalPreparationTime","scheduleFormat","getStudentLabel","swapPairs","newSchedule","group","candidates","index1","index2","temp","getResultsPP","initialSchedule","maxIterations","bestSchedule","bestTime","newTime","executionTimePairwise","formatSchedule","data","deviationTest","drawDeviationChart","averageDeviationsFromAnt","averageDeviationsFromGreedy","deviationsFromAnt","deviationsFromGreedy","P","antSchedule","antTF","greedyTF","ppTimeFromAnt","ppTimeFromGreedy","deviationFromAnt","calculateDeviation","deviationFromGreedy","calculateAverage","value1","value2","arr","sum","timeTest","drawTimeChart","averageTimesGreedy","averageTimesAnt","averageTimesBnB","averageTimesPP","execTimesGreedy","execTimesAnt","execTimesBnB","execTimesPP","step","resGreedy","execTimeGreedy","execTimeAnt","execTimeBnB","execTimePP","accuracyTest","drawAccuracyChart","averageDeviationsGreedy","averageDeviationsAnt","averageDeviationsPP","averageDeviationsBnB","deviationsGreedy","deviationsAnt","deviationsPP","deviationsBnB","optimalTF","scheduleBnB","ppTF","deviationGreedy","deviationAnt","deviationPP","deviationBnB","optimalValue"],"mappings":"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"}