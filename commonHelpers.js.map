{"version":3,"file":"commonHelpers.js","sources":["../src/js/generator/taskGenerator.js","../src/js/algorithms/ant/result_ant.js","../src/js/algorithms/ant/ant.js","../src/js/tests/antTest.js","../src/js/algorithms/branchBound/reduction.js","../src/js/algorithms/branchBound/preventCycle.js","../src/js/algorithms/branchBound/branchesAndBounds.js","../src/js/algorithms/branchBound/calcShowResults.js","../src/js/algorithms/branchBound/bnbResults.js","../src/js/tests/branchBoundTest.js","../src/js/algorithms/greedy/greedy.js","../src/js/algorithms/pairwisePermut/pairwisePermut.js","../src/js/tests/timeTest.js"],"sourcesContent":["// Об`єкт функцій для генерації вхідних даних\nconst taskGenerator = {\n  /**\n   * Генерує матрицю передування для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @param {number} tau - Значення математичного сподівання.\n   * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n   * @returns {number[][]} - Матриця передування.\n   */\n  generateMatrix: function (numOfStudents, tau, deltaTau) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents, tau, deltaTau, true);\n\n    // Верхня та нижня границі для генерації випадкових значень\n    const minVal = tau - deltaTau;\n    const maxVal = tau + deltaTau;\n\n    // Створення та заповнення матриці значеннями\n    const matrix = Array.from({ length: numOfStudents }, () =>\n      Array.from({ length: numOfStudents }, () => Infinity)\n    );\n\n    for (let i = 0; i < numOfStudents; i += 1) {\n      for (let j = 0; j < numOfStudents; j += 1) {\n        // Перевірка, чи парність індексів різна\n        if (i % 2 !== j % 2) {\n          matrix[i][j] =\n            Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n        }\n      }\n    }\n\n    return matrix;\n  },\n\n  /**\n   * Генерує тривалість занять для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @returns {number[]} - Массив з тривалостями занять.\n   */\n  generateLessonDuration: function (numOfStudents) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents);\n\n    // Генерація тривалостей занять у діапазоні від 45 до 120 хвилин\n    const times = Array.from(\n      { length: numOfStudents },\n      () => Math.floor(Math.random() * (120 - 45 + 1)) + 45\n    );\n\n    return times;\n  },\n\n  // Отримати дефолтні вхідні дані\n  getDefaultInputValues: function () {\n    // матриця переналаштувань\n    let matrix = [\n      [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n      [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n      [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n      [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n      [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n      [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n      [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n      [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n    ];\n\n    // тривалість занять\n    let trainingDuration = [40, 120, 90, 90, 60, 50, 60, 40];\n\n    return { matrix, trainingDuration };\n  },\n};\n\n/**\n * Перевірка вхідних даних.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} [tau] - Значення математичного сподівання.\n * @param {number} [deltaTau] - Значення напівінтервалу ∆τ.\n * @param {boolean} [checkTauDeltaTau=false] - Флаг для перевірки tau та deltaTau.\n * @throws {Error} - Якщо неправильні вхідні дані.\n */\nexport function validateInputs(\n  numOfStudents,\n  tau,\n  deltaTau,\n  checkTauDeltaTau = false\n) {\n  if (\n    !Number.isInteger(numOfStudents) ||\n    numOfStudents <= 0 ||\n    numOfStudents % 2 !== 0 // Кількість студентів повинна бути парною\n  ) {\n    throw new Error(\n      'Неправильні вхідні дані! Очікується ціле додатнє парне число для numOfStudents.'\n    );\n  }\n\n  if (checkTauDeltaTau) {\n    if (tau < 0 || deltaTau < 0) {\n      throw new Error(\n        'Неправильні вхідні дані! Очікуються не від’ємні значення для tau і deltaTau.'\n      );\n    }\n  }\n}\n\n// Приклад використання\n// try {\n//   const matrix = taskGenerator.generateMatrix(4, 50, 10);\n//   console.log('Матриця передування:', matrix);\n\n//   const lessonDurations = taskGenerator.generateLessonDuration(4);\n//   console.log('Тривалості занять:', lessonDurations);\n// } catch (error) {\n//   console.error(error.message);\n// }\n\n// Експорт функцій\nexport const generateMatrix = taskGenerator.generateMatrix;\nexport const generateLessonDuration = taskGenerator.generateLessonDuration;\nexport const getDefaultInputValues = taskGenerator.getDefaultInputValues;\n\n//===== Test case 2 ====//\n// export function generateMatrix(numOfStudents, tau, deltaTau) {\n//   let matrix = []; // матриця передування\n\n//   for (let i = 0; i < numOfStudents; i += 1) {\n//     matrix[i] = [];\n\n//     for (let j = 0; j < numOfStudents; j += 1) {\n//       // якщо обидва індекси парні або непарні\n//       if (i % 2 === j % 2) {\n//         matrix[i][j] = Infinity;\n//         continue; // наступна ітерація\n//       }\n\n//       let minVal = tau - deltaTau; // нижнє значення\n//       let maxVal = tau + deltaTau; // верхнє значення\n\n//       matrix[i][j] = Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n//     }\n//   }\n\n//   return matrix;\n// }\n","export function Schedule_(gender, result) {\n    let schedule = ''; // Початкове значення розкладу\n\n    // Проходимо по елементах масиву, починаючи з першого елемента\n\n    if ((gender === 'g' && result[0] % 2 === 0) || (gender === 'b' && result[0] % 2 === 1)) {\n        for (let i = 0; i < result.length; i++) {\n            const isLastNode = i === result.length - 1;\n            const value = result[i];\n            const isEven = i % 2 === 0;\n            if (isLastNode) {\n                schedule += isEven ? `g${value+1}` : `b${value+1}`;\n            } else {\n                schedule += isEven ? `g${value+1} -> ` : `b${value+1} -> `;\n            }\n        }\n    } else if ((gender === 'g' && result[0] % 2 === 1) || (gender === 'b' && result[0] % 2 === 0)) {\n        for (let i = 0; i < result.length; i++) {\n            const isLastNode = i === result.length - 1;\n            const value = result[i];\n            const isEven = i % 2 === 0;\n            if (isLastNode) {\n                schedule += isEven ? `b${value+1}` : `g${value+1}`;\n            } else {\n                schedule += isEven ? `b${value+1} -> ` : `g${value+1} -> `;\n            }\n        }\n    }\n\n\n    return schedule; // Повертаємо розклад\n}","// Kovalenko Kateryna\nimport * as Generator from '../../generator/taskGenerator.js';\nimport * as results from '../ant/result_ant.js';\n\nexport function ant(n, t_matrix, less_matrix = Generator.generateLessonDuration(n), alpha = 1) {\n    // Вимірювання часу виконання алгоритму\n    const startTime = performance.now();\n\n    // Параметри алгоритму\n\n    let beta = 1;\n    let tay_0 = 0.7;\n    let p = 0.1;\n\n    ///\n    let tay_matrix = [];\n    let lMax = 10;\n    let result = [];\n    let result_func;\n    let shedule = '';\n\n    //Обираємо хто буде першим в матриці хлопчик чи дівчинка\n    let gender = 'g'\n\n    let t_use = t_matrix.slice().map(row => row.slice());\n\n    // Зведення матриці переналаштувань\n\n    function minFromRows(matrix) {\n        return matrix.map(row => Math.min(...row));\n    }\n\n    let minsByRows = minFromRows(t_use);\n\n    function subEveryRow(matrix, minBorder) {\n        const mins = minFromRows(matrix);\n        minBorder += mins.reduce((acc, curr) => acc + curr, 0);\n\n        const newMatrix = matrix.map((row, i) =>\n            row.map((value, j) => value - mins[i])\n        );\n\n        return { matrix: newMatrix, minBorder };\n    }\n\n    let { matrix: newMatrixRows, minBorder: newMinBorderRows } = subEveryRow(\n        t_use,\n        0\n    );\n\n    function minFromColumns(matrix) {\n        const mins = [];\n        const columns = Object.keys(matrix[0]);\n\n        columns.forEach(column => {\n            const columnValues = matrix.map(row => row[column]);\n            mins[column] = Math.min(...columnValues);\n        });\n\n        return mins;\n    }\n\n    let minsByCols = minFromColumns(t_use);\n\n    function subEveryColumn(matrix, minBorder) {\n        const mins = minFromColumns(matrix);\n        minBorder += Object.values(mins).reduce((acc, curr) => acc + curr, 0);\n\n        const newMatrix = matrix.map((row, i) =>\n            row.map((value, j) => value - mins[j])\n        );\n\n        return { matrix: newMatrix, minBorder };\n    }\n\n    let { matrix: newMatrixCols, minBorder: newMinBorderCols } = subEveryColumn(\n        t_use,\n        0\n    );\n\n    let min_res = newMinBorderCols + newMinBorderRows;\n\n    // Заповнення матриці ферамонів\n    for (let i = 0; i < n; ++i) {\n        tay_matrix[i] = [];\n        for (let j = 0; j < n; ++j) {\n            if (t_matrix[i][j] != Infinity) {\n                tay_matrix[i][j] = tay_0;\n            } else {\n                tay_matrix[i][j] = Infinity;\n            }\n        }\n    }\n\n    // Основна частина програми\n    for (let k = 1; k <= lMax; k++) {\n        let student = Math.floor(Math.random() * n); // Довільним чином обираємо першого учня на кожній ітерації\n        // console.log(\"ІТЕРАЦІЯ\", k)\n        let iteration_matrix = t_matrix.slice().map(row => row.slice());\n        let result_it = []; // змінна з результатами кожної ітерації\n        let result_it_func = 0;\n        let visited_array = Array.from({ length: n }, () => Array(n).fill(0));\n        result_it.push(student);\n        while (result_it.length < n) {\n            for (let x = 0; x < n; x++) iteration_matrix[x][student] = Infinity;\n            // Обчислення знаменника з формули 1\n            let formula_denominator = 0;\n            let res_set = new Map();\n            for (let i = 0; i < n; i++) {\n                if (iteration_matrix[student][i] != Infinity) {\n                    formula_denominator +=\n                        parseFloat(tay_matrix[student][i] ** alpha) *\n                        (1 / t_matrix[student][i]) ** beta;\n                }\n            }\n            for (let i = 0; i < n; i++) {\n                let it = 0;\n                if (iteration_matrix[student][i] != Infinity) {\n                    it = parseFloat(\n                        (tay_matrix[student][i] ** alpha *\n                            (1 / t_matrix[student][i]) ** beta) /\n                        formula_denominator\n                    ).toFixed(4);\n                    if (res_set.size === 0) res_set.set(i, parseFloat(it));\n                    else {\n                        let lastValue = Array.from(res_set.values()).pop();\n                        it = parseFloat(parseFloat(it) + parseFloat(lastValue)).toFixed(4);\n                        res_set.set(i, parseFloat(it));\n                    }\n                }\n            }\n\n            let randomNumber = parseFloat(Math.random()).toFixed(4); // Генерує випадкове число від 0 до 1\n\n            for (let [key, value] of res_set.entries()) {\n                if (parseFloat(randomNumber) <= parseFloat(value)) {\n                    student = key;\n                    result_it.push(student);\n                    break;\n                }\n            }\n        }\n        // Обчислення ЦФ :\n        for (let i = 0; i < result_it.length - 1; i++) {\n            const currentStudent = result_it[i];\n            const nextStudent = result_it[i + 1];\n            result_it_func +=\n                parseFloat(t_matrix[currentStudent][nextStudent]) + less_matrix[i];\n            visited_array[currentStudent][nextStudent] = 1;\n        }\n\n        let delta_tay = min_res / result_it_func;\n        // Оновлення матриці феромонів\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                if (t_matrix[i][j] != Infinity) {\n                    if (visited_array[i][j] === 1)\n                        tay_matrix[i][j] = parseFloat(\n                            (1 - p) * tay_matrix[i][j] + delta_tay\n                        ).toFixed(4);\n                    else\n                        tay_matrix[i][j] = parseFloat((1 - p) * tay_matrix[i][j]).toFixed(\n                            4\n                        );\n                }\n            }\n        }\n\n        if (k === 1) {\n            result = result_it;\n            result_func = result_it_func;\n        } else if (result_func > result_it_func) {\n            result = result_it;\n            result_func = result_it_func;\n        }\n    }\n    //////\n    const endTime = performance.now();\n    const executionTime = endTime - startTime;\n    console.log('Розклад: ');\n    shedule = results.Schedule_(gender, result);\n    console.log(shedule);\n    //console.log('Розклад: ', result);\n    console.log('Значення ЦФ: ', result_func);\n    console.log('ExecutionTime: ', executionTime);\n\n\n    return { shedule, result, result_func, executionTime };\n}","import * as results from '../algorithms/ant/ant.js';\nimport * as Generator from '../generator/taskGenerator.js';\n\n// Вхідні дані\nconst n = 8;\nconst tau = 100;\nconst deltaTau = 50;\nconst alphaArray = [1, 2, 3, 4, 5];\n\nfunction test_ant(n, tau, deltaTau, alphaArray) {\n    let result = [];\n    let N = 10;\n\n    for (let i = 0; i < alphaArray.length; i += 1) {\n        let total_result = 0;\n        for (let j = 0; j < N; j++) {\n            let t_matrix = Generator.generateMatrix(n, tau, deltaTau);\n            let less_matrix = Generator.generateLessonDuration(n);\n            console.table(t_matrix);\n            let res = results.ant(n, t_matrix, less_matrix, alphaArray[i]);\n            total_result += res.result_func;\n        }\n        let averageResult = total_result / N;\n        result.push(averageResult);\n        console.log(result);\n    }\n\n    return result;\n}\nlet result = test_ant(n, tau, deltaTau, alphaArray);\n\n// Вивести результати у вигляді графіка\nfunction drawChart(alpha, result, htmlElement) {\n    const ctx = document.getElementById(htmlElement).getContext('2d');\n    new Chart(ctx, {\n        type: 'bar', // стовпчаста діаграма\n        data: {\n            labels: alphaArray,\n            datasets: [{\n                label: 'ЦФ vs a',\n                data: result,\n                backgroundColor: 'rgb(255, 182, 193, 0.5)',\n                borderColor: 'rgba(255, 105, 180, 1)',\n                borderWidth: 0,\n            }, ],\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                legend: {\n                    position: 'top',\n                },\n                title: {\n                    display: true,\n                    text: 'Графік залежності ЦФ від a',\n                },\n                tooltip: {\n                    callbacks: {\n                        label: function(context) {\n                            return `Цільова функція: ${context.raw}`;\n                        },\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: 'Значення напівінтервалу a',\n                    },\n                },\n                y: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: 'Цільова Функція',\n                    },\n                },\n            },\n        },\n    });\n}\n\ndrawChart(alphaArray, result, 'antTest');","// Pohorila Dariia\n\n// Функція для редукції матриці (мінімізація по рядках і стовпцях)\nexport function reduceMatrix(matrix, index) {\n  let sumMinRows = 0; // Сума мінімальних значень по рядках\n  let sumMinColumns = 0; // Сума мінімальних значень по стовпцях\n\n  //MINROW\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array); // Знаходження мінімального значення в рядку\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0; // Якщо значення не є числом або не є кінцевим, встановити 0\n    }\n    sumMinRows += min; // Додати мінімальне значення до суми\n    let minimizedRow = array.map(number => {\n      return (number -= min); // Відняти мінімальне значення з кожного елемента рядка\n    });\n    matrix[index] = minimizedRow; // Оновити рядок в матриці\n  });\n\n  //TRANSPOSED\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  //MINCOL\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array);\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0;\n    }\n    sumMinColumns += min;\n    let minimizedColumn = array.map(number => {\n      return (number -= min);\n    });\n    matrix[index] = minimizedColumn;\n  });\n\n  //DISTRAMPOSE\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  let total = sumMinRows + sumMinColumns; // Загальна вартість мінімізації\n\n  let node = {\n    index: index,\n    matrix: matrix,\n    cost: total,\n  };\n\n  return node;\n}\n","// Pohorila Dariia\n\n// Заборона негамільтонових шляхів\nexport function setRowColumnInfinity(matrix, from, to) {\n  // Функція для встановлення нескінченності у вказаних рядках та стовпцях\n  const thisMatrix = matrix.map(row => row.slice());\n\n  for (let i = 0; i < matrix.length; i += 1) {\n    thisMatrix[from][i] = Infinity; // Встановлення нескінченності в рядку\n    thisMatrix[i][to] = Infinity; // Встановлення нескінченності в стовпці\n    thisMatrix[to][from] = Infinity; // Встановлення нескінченності у зворотному напрямку\n    thisMatrix[to][0] = Infinity; // Встановлення нескінченності в першому елементі стовпця\n  }\n\n  return thisMatrix;\n}\n","// Pohorila Dariia\nimport * as matrixReduction from './reduction.js';\nimport * as preventCycle from './preventCycle.js';\n// import * as setRowColumnInfinityJs from './setRowColumnInfinity.js';\n\n// МЕТОД ГРАНИЦЬ І МЕЖ\nexport function branchAndBound(matrixData) {\n  // Встановлення нескінченності на діагоналі матриці\n  for (let i = 0; i < matrixData.length; i += 1) {\n    for (let j = 0; j < matrixData.length; j += 1) {\n      if (i == j) {\n        matrixData[i][j] = Infinity;\n      }\n    }\n  }\n\n  const minCostArray = []; // Масив для збереження мінімальної вартості\n  const objRoot = matrixReduction.reduceMatrix(matrixData, 0); // Початкова редукція матриці\n  minCostArray.push({\n    Node: objRoot.index + 1,\n    cost: objRoot.cost,\n  });\n\n  let row = objRoot.index; // Початковий рядок\n  let prevMatrix = objRoot.matrix.map(row => row.slice());\n  let prevCost = objRoot.cost; // Початкова вартість\n\n  // Прохід по всіх рядках матриці\n  for (let index = 0; index < matrixData.length - 1; index++) {\n    let objArrayTemp = []; // Тимчасовий масив для збереження вузлів\n    for (let column = 1; column < matrixData.length; column++) {\n      const infRowColumn = preventCycle.setRowColumnInfinity(\n        prevMatrix,\n        row,\n        column\n      ); // Встановлення нескінченності у рядках та стовпцях\n      const objNode = matrixReduction.reduceMatrix(infRowColumn, column); // Редукція нової матриці\n\n      objNode.cost = objNode.cost + prevCost + prevMatrix[row][column]; // Оновлення вартості вузла\n      objArrayTemp.push(objNode); // Додавання вузла до тимчасового масиву\n      //   console.log(\"Node: %d - Cost: %d\", objNode.index, objNode.cost);\n    }\n\n    // Знаходження вузла з мінімальною вартістю\n    let objMinCost = objArrayTemp.reduce(function (prev, curr) {\n      return prev.cost < curr.cost ? prev : curr;\n    });\n    // console.log(' Node: %d - Cost: %d ', objMinCost.index + 1, objMinCost.cost);\n\n    minCostArray.push({\n      Node: objMinCost.index + 1,\n      cost: objMinCost.cost,\n    });\n\n    row = objMinCost.index;\n    prevMatrix = objMinCost.matrix.map(row => row.slice());\n    prevCost = objMinCost.cost;\n  }\n\n  // Витяг останнього значення cost з масиву minCostArray\n  const lastCost = minCostArray[minCostArray.length - 1].cost;\n\n  return { minCostArray, lastCost };\n}\n\n////// OUTPUT\n////// DATA\n// ТРИВАЛОСТІ УРОКІВ\n// const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n// const trainingDuration = [40, 120, 90, 90, 60, 50, 60, 40];\n\n// МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ\n// let matrix = Generator.generateMatrix(numOfStudents, tau, deltaTau);\n// let matrix = [\n//   [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n// ];\n\n// console.log('\\nМАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n// console.table(matrix);\n\n// console.log('\\nВУЗЛИ');\n// const { minCostArray, lastCost } = branchAndBound(matrix);\n// console.log(minCostArray);\n\n// console.log('\\nРОЗКЛАД:');\n// let schedule = results.printSchedule(minCostArray);\n// console.log(schedule);\n\n// console.log('\\nСума переналаштувань:', lastCost, 'хв');\n\n// const totalDuration = results.sumOfDurations(trainingDuration);\n// console.log(`Тривалість уроків:`, totalDuration, 'хв');\n\n// const totalWorkTime = results.calcTrainerWorkTime(totalDuration, lastCost);\n// console.log('ЧАС РОБОТИ ТРЕНЕРА:', totalWorkTime, 'хв\\n');\n","// Pohorila Dariia\n\n// Вивести розклад\nexport function printSchedule(minCostArray) {\n  let schedule = ''; // Початкове значення розкладу\n\n  // Проходимо по елементах масиву minCostArray, починаючи з другого елемента\n  for (let i = 0; i < minCostArray.length; i++) {\n    const isLastNode = i === minCostArray.length - 1;\n    const node = minCostArray[i].Node;\n    const isEven = i % 2 === 0;\n\n    if (isLastNode) {\n      schedule += isEven ? `g${node}` : `b${node}`;\n    } else {\n      schedule += isEven ? `g${node} -> ` : `b${node} -> `;\n    }\n  }\n\n  return schedule; // Повертаємо розклад\n}\n\n// Обчислити суму тривалостей занять\nexport function sumOfDurations(durations) {\n  return durations.reduce((acc, duration) => acc + duration, 0);\n}\n\n// Обчислити сумарний робочий час тренера\nexport function calcTrainerWorkTime(totalDuration, lastCost) {\n  return totalDuration + lastCost;\n}\n","import * as Generator from '../../generator/taskGenerator.js';\nimport * as bnb from './branchesAndBounds.js';\nimport * as calcShowResults from './calcShowResults.js';\n\n//////// РОЗВ`ЯЗОК ЗАДАЧІ МГтМ ТА ВИВЕДЕННЯ РЕЗУЛЬТАТІВ РОБОТИ АЛГОРИТМУ\nexport function calcResultsBnB(matrix, trainingDuration) {\n    // Початок вимірювання часу\n    const startTime = performance.now();\n\n    // Виконання алгоритму гілок та границь\n    let { minCostArray, lastCost } = bnb.branchAndBound(matrix);\n\n    // Обчислення розкладу та часу роботи тренера\n    let schedule = calcShowResults.printSchedule(minCostArray);\n    let totalDuration = calcShowResults.sumOfDurations(trainingDuration);\n    let totalWorkTime = calcShowResults.calcTrainerWorkTime(\n        totalDuration,\n        lastCost\n    );\n\n    // Завершення вимірювання часу та виведення результату\n    const endTime = performance.now();\n    const executionTimeBnB = endTime - startTime;\n\n    return {\n        totalWorkTimeBnB: totalWorkTime,\n        scheduleBnB: schedule,\n        executionTimeBnB,\n    };\n}\n\n/**\n * Обчислює результати для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n * @returns {Object} - Об'єкт з результатами.\n */\nexport function getResults(matrix, trainingDuration) {\n    // Виконання алгоритму гілок та границь\n    let { minCostArray, lastCost } = bnb.branchAndBound(matrix);\n\n    // Обчислення розкладу та часу роботи тренера\n    let schedule = calcShowResults.printSchedule(minCostArray);\n    let totalDuration = calcShowResults.sumOfDurations(trainingDuration);\n    let totalWorkTime = calcShowResults.calcTrainerWorkTime(\n        totalDuration,\n        lastCost\n    );\n\n    // Повернення об'єкта з усіма результатами\n    return {\n        trainingDuration,\n        matrix,\n        minCostArray,\n        lastCost,\n        schedule,\n        totalDuration,\n        totalWorkTime,\n    };\n}\n\n/**\n * Виводить результати на консоль для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n */\nexport function outputResultsBnB(matrix, trainingDuration) {\n    // Отримання результатів\n    const results = getResults(matrix, trainingDuration);\n\n    // Виведення результатів на консоль\n    console.log('ГЕНЕРАЦІЯ ІНДИВІДУАЛЬНОЇ ЗАДАЧІ...\\n');\n    console.log('1.ТРИВАЛІСТЬ ЗАЙНЯТЬ');\n    console.table(results.trainingDuration);\n\n    console.log('2.МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n    console.table(results.matrix);\n\n    console.log('\\nПОШУК РОЗВ`ЯЗКУ МГтМ...');\n    console.log('\\nВузли');\n    console.log(results.minCostArray);\n\n    console.log('\\nРозклад:');\n    console.log(results.schedule);\n\n    console.log('\\nСума переналаштувань:', results.lastCost, 'хв');\n    console.log('Тривалість уроків:', results.totalDuration, 'хв');\n    console.log('Час роботи тренера:', results.totalWorkTime, 'хв\\n');\n\n    return results.totalWorkTime;\n}\n\n// Test Case\n// try {\n//     const numOfStudents = 8;\n//     const tau = 50;\n//     const deltaTau = 10;\n\n//     // outputResultsBnB(numOfStudents, tau, deltaTau);\n//     // let results = getResults(numOfStudents, tau, deltaTau);\n//     // console.log(results);\n// } catch (error) {\n//     console.error('Помилка:', error.message);\n// }","import * as results from '../algorithms/branchBound/bnbResults.js';\nimport * as Generator from '../generator/taskGenerator.js';\n\n// Вхідні дані\nconst numOfStudents = 8;\nconst tau = 100;\nconst deltaTauMassive = [10, 50];\n\n// Обчислення ЦФ для різних ∆τ\nfunction testBnb(numOfStudents, tau, deltaTauMassive) {\n  let targetFunctions = [];\n  const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n\n  for (let i = 0; i < deltaTauMassive.length; i += 1) {\n    const matrix = Generator.generateMatrix(\n      numOfStudents,\n      tau,\n      deltaTauMassive[i]\n    );\n\n    let res = results.calcResultsBnB(matrix, trainingDuration);\n    targetFunctions.push(res.totalWorkTimeBnB);\n  }\n\n  return targetFunctions;\n}\n\nlet targetFunctions = testBnb(numOfStudents, tau, deltaTauMassive);\nconsole.log(targetFunctions);\n\n// Вивести результати у вигляді графіка\nfunction drawChart(deltaTauMassive, targetFunctions, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n  new Chart(ctx, {\n    type: 'bar', // стовпчаста діаграма\n    data: {\n      labels: deltaTauMassive,\n      datasets: [\n        {\n          label: 'ЦФ vs ∆τ',\n          data: targetFunctions,\n          backgroundColor: 'rgb(96, 130, 182)', // Блакитний колір для стовпців\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 0,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Графік залежності ЦФ від ∆τ',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Цільова функція: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Значення напівінтервалу ∆τ',\n          },\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Цільова Функція',\n          },\n        },\n      },\n    },\n  });\n}\n\ndrawChart(deltaTauMassive, targetFunctions, 'bnbTest');\n","import { generateMatrix } from '../../generator/taskGenerator.js';\n\nfunction findNearestNeighbor(matrix, current, visited) {\n  let nearest = -1;\n  let minDistance = Infinity;\n\n  for (let i = 0; i < matrix.length; i++) {\n    if (!visited.has(i) && matrix[current][i] < minDistance) {\n      minDistance = matrix[current][i];\n      nearest = i;\n    }\n  }\n\n  return nearest;\n}\n\nexport function greedySchedule(matrix) {\n  let numOfStudents = matrix.length;\n  let visited = new Set();\n  let schedule = [];\n\n  let current = Math.floor(Math.random() * numOfStudents);\n  schedule.push(current);\n  visited.add(current);\n\n  while (schedule.length < numOfStudents) {\n    let next = findNearestNeighbor(matrix, current, visited);\n    if (next === -1) break;\n\n    schedule.push(next);\n    visited.add(next);\n    current = next;\n  }\n\n  return schedule;\n}\n\n// Additional function for the timeTest\nexport function getGreedyResults(matrix) {\n  const startTime = performance.now();\n\n  let numOfStudents = matrix.length;\n  let visited = new Set();\n  let schedule = [];\n\n  let current = Math.floor(Math.random() * numOfStudents);\n  schedule.push(current);\n  visited.add(current);\n\n  while (schedule.length < numOfStudents) {\n    let next = findNearestNeighbor(matrix, current, visited);\n    if (next === -1) break;\n\n    schedule.push(next);\n    visited.add(next);\n    current = next;\n  }\n\n  const endTime = performance.now();\n  const executionTimeGreedy = endTime - startTime;\n\n  return {\n    schedule,\n    executionTimeGreedy,\n  };\n}\n\nexport function calculateTotalPreparationTime(matrix, schedule) {\n  let total = 0;\n  for (let i = 0; i < schedule.length - 1; i++) {\n    total += matrix[schedule[i]][schedule[i + 1]];\n  }\n  return total;\n}\n\n// Function to format the schedule\nexport function formatSchedule(schedule) {\n  return schedule.map((student, index) => `${index % 2 === 0 ? 'b' : 'g'}${student + 1}`).join(' -> ');\n}\n","import { generateMatrix } from '../../generator/taskGenerator.js';\nimport { greedySchedule, calculateTotalPreparationTime } from '../greedy/greedy.js';\n\nfunction swapPairs(schedule, numOfStudents) {\n  let newSchedule = schedule.slice();\n  let group = Math.random() < 0.5 ? 0 : 1;\n\n  let candidates = [];\n  for (let i = 0; i < numOfStudents; i++) {\n    if (i % 2 === group) {\n      candidates.push(i);\n    }\n  }\n\n  let index1 = candidates[Math.floor(Math.random() * candidates.length)];\n  let index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  while (index1 === index2) {\n    index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  }\n\n  let temp = newSchedule[index1];\n  newSchedule[index1] = newSchedule[index2];\n  newSchedule[index2] = temp;\n\n  return newSchedule;\n}\n\nfunction optimizeSchedule(matrix, initialSchedule, maxIterations) {\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  for (let i = 0; i < maxIterations; i++) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n  }\n\n  return { bestSchedule, bestTime };\n}\n\n// Additional func for the timeTest\nexport function getResultsPP(\n  matrix,\n  initialSchedule = greedySchedule(matrix),\n  maxIterations = 1000\n) {\n  const startTime = performance.now();\n\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  for (let i = 0; i < maxIterations; i++) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n  }\n\n  const endTime = performance.now();\n  const executionTimePairwise = endTime - startTime;\n\n  return { bestSchedule, bestTime, executionTimePairwise };\n}\n","import * as Generator from '../generator/taskGenerator.js';\nimport * as resultsGreedy from '../algorithms/greedy/greedy.js';\nimport * as resultsAnt from '../algorithms/ant/ant.js';\nimport * as resultsBnB from '../algorithms/branchBound/bnbResults.js';\nimport * as resultsPP from '../algorithms/pairwisePermut/pairwisePermut.js';\n\n// Вхідні дані\nconst numOfStudents = [4, 6, 8, 10, 12, 14, 16, 18, 20]; // розмірність задачі\nconst tau = 100; // значення математичного сподівання\nconst deltaTau = 10; // значення напівінтервалу\n\n// Приклад виклику функції\nconst data = timeTest(numOfStudents, tau, deltaTau);\ndrawTimeChart(data, 'timeTest'); // вивід гістограм\n\n// середні часи для відображення в консолі\n// let { averageTimesGreedy, averageTimesAnt, averageTimesBnB, averageTimesPP } =\n//   timeTest(numOfStudents, tau, deltaTau);\n\n// console.log('averageTimesGreedy – ', averageTimesGreedy);\n// console.log('averageTimesAnt – ', averageTimesAnt);\n// console.log('averageTimesBnB – ', averageTimesBnB);\n// console.log('averageTimesPP – ', averageTimesPP);\n\n// Тестування\nfunction timeTest(numOfStudents, tau, deltaTau) {\n  // Часи виконання алгоритмів та середні часи виконання алгоритмів\n  let averageTimesGreedy = [];\n  let averageTimesAnt = [];\n  let averageTimesBnB = [];\n  let averageTimesPP = [];\n\n  for (let i = 0; i < numOfStudents.length; i += 1) {\n    // 20 прогонів\n    let execTimesGreedy = [];\n    let execTimesAnt = [];\n    let execTimesBnB = [];\n    let execTimesPP = [];\n\n    for (let j = 0; j < 20; j += 1) {\n      // Генеруємо тривалості уроків та матрицю переналаштувань\n      const trainingDuration = Generator.generateLessonDuration(\n        numOfStudents[i],\n        tau,\n        deltaTau\n      );\n      const matrix = Generator.generateMatrix(numOfStudents[i], tau, deltaTau);\n\n      // Обчислюємо роботи алгоритмів\n      const step = 0.1;\n\n      // жадібний\n      const resGreedy =\n        resultsGreedy.getGreedyResults(matrix).executionTimeGreedy + step;\n      // мурахи\n      const resAnt =\n        resultsAnt.ant(numOfStudents[i], matrix).executionTime + step;\n      // МГтМ\n      const resBnB =\n        resultsBnB.calcResultsBnB(matrix, trainingDuration).executionTimeBnB +\n        step;\n\n      // перестановки\n      const resPP = resultsPP.getResultsPP(matrix).executionTimePairwise + step;\n\n      // Додаємо часи в масив відповідного алгоритму\n\n      execTimesGreedy.push(resGreedy);\n      execTimesBnB.push(resBnB);\n      execTimesPP.push(resPP);\n      execTimesAnt.push(resAnt);\n    }\n\n    // Обчислюємо середні часи та додаємо до масиву відповідного алгоритму\n    averageTimesGreedy.push(calculateAverage(execTimesGreedy));\n    averageTimesBnB.push(calculateAverage(execTimesBnB));\n    averageTimesPP.push(calculateAverage(execTimesPP));\n    averageTimesAnt.push(calculateAverage(execTimesAnt));\n  }\n\n  return {\n    labels: numOfStudents, // мітки графіка по горизонталі\n    averageTimesGreedy,\n    averageTimesAnt,\n    averageTimesBnB,\n    averageTimesPP,\n  };\n}\n\n// Виводимо гістограми\nfunction drawTimeChart(data, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: data.labels,\n      datasets: [\n        {\n          label: 'Greedy',\n          data: data.averageTimesGreedy,\n          backgroundColor: 'rgb(96, 130, 182)',\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Ant',\n          data: data.averageTimesAnt,\n          backgroundColor: 'rgb(182, 96, 130)',\n          borderColor: 'rgba(180, 70, 130, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'BnB',\n          data: data.averageTimesBnB,\n          backgroundColor: 'rgb(96, 182, 130)',\n          borderColor: 'rgba(70, 180, 130, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Pairwise',\n          data: data.averageTimesPP,\n          backgroundColor: 'rgb(130, 96, 182)',\n          borderColor: 'rgba(130, 70, 180, 1)',\n          borderWidth: 1,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Average Execution Time vs Number of Students',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Average Execution Time: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: 'Number of Students (n)',\n          },\n        },\n        y: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: 'Average Execution Time (ms)',\n          },\n        },\n      },\n      layout: {\n        backgroundColor: 'rgba(211, 211, 211, 1)',\n      },\n    },\n  });\n}\n\n// Обчислити середнє значення масиву\nfunction calculateAverage(arr) {\n  if (arr.length === 0) {\n    return 0; // Повертаємо 0, якщо масив пустий\n  }\n\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum / arr.length;\n}\n\n///////// OTHER\n// function drawTimeChart(averageTimesGreedy, labels, htmlElement) {\n//   const ctx = document.getElementById(htmlElement).getContext('2d');\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: labels,\n//       datasets: [\n//         {\n//           label: 'Greedy',\n//           data: averageTimesGreedy,\n//           backgroundColor: 'rgb(96, 130, 182)',\n//           borderColor: 'rgba(70, 130, 180, 1)',\n//           borderWidth: 0,\n//         },\n//       ],\n//     },\n//     options: {\n//       scales: {\n//         y: {\n//           beginAtZero: true,\n//         },\n//       },\n//     },\n//   });\n// }\n\n// function drawTimeChart(data, htmlElement) {\n//   const ctx = document.getElementById(htmlElement).getContext('2d');\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: data.averageTimesGreedy, // Горизонтальна вісь: час виконання\n//       datasets: [\n//         {\n//           label: 'Greedy',\n//           data: data.labels, // Вертикальна вісь: кількість студентів\n//           backgroundColor: 'rgb(96, 130, 182)',\n//           borderColor: 'rgba(70, 130, 180, 1)',\n//           borderWidth: 0,\n//         },\n//         {\n//           label: 'Ant',\n//           data: data.averageTimesAnt,\n//           backgroundColor: 'rgb(182, 96, 130)',\n//           borderColor: 'rgba(180, 70, 130, 1)',\n//           borderWidth: 0,\n//         },\n//         {\n//           label: 'BnB',\n//           data: data.averageTimesBnB,\n//           backgroundColor: 'rgb(96, 182, 130)',\n//           borderColor: 'rgba(70, 180, 130, 1)',\n//           borderWidth: 0,\n//         },\n//         {\n//           label: 'Pairwise',\n//           data: data.averageTimesPairwise,\n//           backgroundColor: 'rgb(130, 96, 182)',\n//           borderColor: 'rgba(130, 70, 180, 1)',\n//           borderWidth: 0,\n//         },\n//       ],\n//     },\n//     options: {\n//       responsive: true,\n//       plugins: {\n//         legend: {\n//           position: 'top',\n//         },\n//         title: {\n//           display: true,\n//           text: 'Average Execution Time vs Number of Students',\n//         },\n//         tooltip: {\n//           callbacks: {\n//             label: function (context) {\n//               return `Average Execution Time: ${context.raw}`;\n//             },\n//           },\n//         },\n//       },\n//       scales: {\n//         x: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Average Execution Time',\n//           },\n//         },\n//         y: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Number of Students (n)',\n//           },\n//         },\n//       },\n//       layout: {\n//         backgroundColor: 'rgba(211, 211, 211, 1)',\n//       },\n//     },\n//   });\n// }\n\n/**\n * Результати:\n * для різних ен виводимо середній час роботи одного і того ж алгоритма\n */\n\n// function timeTest(numOfStudents, tau, deltaTau) {\n//   // Часи виконання алгоритмів\n//   let execTimeGreedy = [];\n//   let execTimeAnt = [];\n//   let execTimeBnB = [];\n//   let execTimePairwise = [];\n\n//   // Середні часи виконання алгоритмів\n//   let aveTimeGreedy = [];\n//   let aveTimeAnt = [];\n//   let aveTimeBnB = [];\n//   let aveTimePairwise = [];\n\n//   let execTimes = [];\n//   let aveTimes = [];\n\n//   for (let i = 0; i < numOfStudents.length; i += 1) {\n//     execTimeGreedy = [];\n//     execTimeAnt = [];\n//     execTimeBnB = [];\n//     execTimePairwise = [];\n\n//     // 20 прогонів\n//     for (let j = 0; j < 20; j += 1) {\n//       // Генеруємо тривалості уроків\n//       const trainingDuration = Generator.generateLessonDuration(\n//         numOfStudents[i],\n//         tau,\n//         deltaTau\n//       );\n\n//       // Генеруємо матрицю переналаштувань\n//       const matrix = Generator.generateMatrix(numOfStudents[i], tau, deltaTau);\n\n//       // Обчислюємо роботи алгоритмів\n//       let resBnB = resultsBnB.calcResultsBnB(matrix, trainingDuration);\n\n//       // Додаємо часи в масив відповідного алгоритму\n//       execTimeBnB.push(resBnB.executionTimeBnB);\n//     }\n\n//     const averageTimeBnB = average(execTimeBnB);\n//     // Округлення до двох знаків після коми\n//     aveTimeBnB.push(parseFloat(averageTimeBnB.toFixed(2)));\n//   }\n\n//   aveTimes.push(aveTimeGreedy, aveTimeAnt, aveTimeBnB, aveTimePairwise);\n//   execTimes.push(execTimeGreedy, execTimeAnt, execTimeBnB, execTimePairwise);\n\n//   return { execTimes, aveTimes };\n// }\n"],"names":["taskGenerator","numOfStudents","tau","deltaTau","validateInputs","minVal","maxVal","matrix","i","j","checkTauDeltaTau","generateMatrix","generateLessonDuration","Schedule_","gender","result","schedule","isLastNode","value","isEven","ant","n","t_matrix","less_matrix","Generator.generateLessonDuration","alpha","startTime","beta","tay_0","p","tay_matrix","lMax","result_func","shedule","t_use","row","minFromRows","subEveryRow","minBorder","mins","acc","curr","newMatrixRows","newMinBorderRows","minFromColumns","column","columnValues","subEveryColumn","newMatrixCols","newMinBorderCols","min_res","k","student","iteration_matrix","result_it","result_it_func","visited_array","x","formula_denominator","res_set","it","lastValue","randomNumber","key","currentStudent","nextStudent","delta_tay","executionTime","results.Schedule_","alphaArray","test_ant","N","total_result","Generator.generateMatrix","res","results.ant","averageResult","drawChart","htmlElement","ctx","context","reduceMatrix","index","sumMinRows","sumMinColumns","array","min","minimizedRow","number","_","colIndex","minimizedColumn","total","setRowColumnInfinity","from","to","thisMatrix","branchAndBound","matrixData","minCostArray","objRoot","matrixReduction.reduceMatrix","prevMatrix","prevCost","objArrayTemp","infRowColumn","preventCycle.setRowColumnInfinity","objNode","objMinCost","prev","lastCost","printSchedule","node","sumOfDurations","durations","duration","calcTrainerWorkTime","totalDuration","calcResultsBnB","trainingDuration","bnb.branchAndBound","calcShowResults.printSchedule","calcShowResults.sumOfDurations","totalWorkTime","calcShowResults.calcTrainerWorkTime","executionTimeBnB","deltaTauMassive","testBnb","targetFunctions","results.calcResultsBnB","findNearestNeighbor","current","visited","nearest","minDistance","greedySchedule","next","getGreedyResults","executionTimeGreedy","calculateTotalPreparationTime","swapPairs","newSchedule","group","candidates","index1","index2","temp","getResultsPP","initialSchedule","maxIterations","bestSchedule","bestTime","newTime","executionTimePairwise","data","timeTest","drawTimeChart","averageTimesGreedy","averageTimesAnt","averageTimesBnB","averageTimesPP","execTimesGreedy","execTimesAnt","execTimesBnB","execTimesPP","step","resGreedy","resultsGreedy.getGreedyResults","resAnt","resultsAnt.ant","resBnB","resultsBnB.calcResultsBnB","resPP","resultsPP.getResultsPP","calculateAverage","arr","sum"],"mappings":"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"}